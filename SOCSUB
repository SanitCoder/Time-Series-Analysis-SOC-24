{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9022743,"sourceType":"datasetVersion","datasetId":5437368}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sanitjethwani/socsub?scriptVersionId=191542236\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\nfile_path_train = '/kaggle/input/supermarket-predictions/train.csv'\ndata = pd.read_csv(file_path_train, parse_dates=['date'])\nfile_path_test = '/kaggle/input/supermarket-predictions/test.csv'\ndata_test = pd.read_csv(file_path_test)\n\ndata = data.sort_values('date')\n\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata['month'] = data['date'].dt.month\ndata['day_of_month'] = data['date'].dt.day\ndata['is_weekend'] = data['day_of_week'].isin([5, 6]).astype(int)\n\ndata = data.dropna()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train = data[data['date'] < '2017-09-30'] \ntest = data[data['date'] >= '2017-09-30']\n\nX_train = train.drop(['date', 'sales'], axis=1)\ny_train = train['sales']\nX_test = test.drop(['date', 'sales'], axis=1)\ny_test = test['sales']","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nmodel = XGBRegressor(n_estimators=2000, learning_rate=0.05, max_depth=6, subsample=0.8, colsample_bytree=0.8)\n\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)\n\nmae = mean_absolute_error(y_test, predictions)\nprint(f'MAE: {mae}')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import RandomizedSearchCV\nfrom xgboost import XGBRegressor\n\nparam_dist = {\n    'n_estimators': [50, 100, 200],\n    'max_depth': [3, 4, 5, 6],\n    'learning_rate': [0.01, 0.05, 0.1],\n    'subsample': [0.8, 0.9, 1.0],\n    'colsample_bytree': [0.8, 1.0]\n}\n\nrandom_search = RandomizedSearchCV(estimator=XGBRegressor(), param_distributions=param_dist, n_iter=10, cv=3, scoring='neg_mean_absolute_error', n_jobs=-1)\n\nrandom_search.fit(X_train, y_train)\n\nprint(f\"Best parameters: {random_search.best_params_}\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport xgboost as xgb\n\nxgb.plot_importance(model)\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(len(data_test))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_test['date'] = pd.to_datetime(data_test['date'])\n\ndata_test = data_test.sort_values('date')\n\ndata_test['day_of_week'] = data_test['date'].dt.dayofweek\ndata_test['month'] = data_test['date'].dt.month\ndata_test['day_of_month'] = data_test['date'].dt.day\ndata_test['is_weekend'] = data_test['day_of_week'].isin([5, 6]).astype(int)\nprint(f\"Rows in data_test before prediction: {len(data_test)}\")\n\nX_test_final = data_test.drop(columns=['date','id'])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X_test_final.columns)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = model.predict(X_test_final)\n\nids = range(0, len(predictions))\noutput = pd.DataFrame({'id': ids, 'sales': predictions})\n\noutput.to_csv('submission.csv', index=False)","metadata":{},"execution_count":null,"outputs":[]}]}